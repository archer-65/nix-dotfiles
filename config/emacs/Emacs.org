#+TITLE: Emacs Configuration
#+AUTHOR: Mario Liguori
#+DATE: {{{time(%Y-%m-%d)}}}

#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

#+HUGO_BASE_DIR: ~/projects/personal-website/
#+HUGO_SECTION: posts
#+HUGO_CATEGORIES: workflow
#+HUGO_TAGS: emacs

* Preface

** Overview

This is my personal configuration of =GNU Emacs=. Many of these settings have been stolen from research and other configurations.
I have a very basic use-case, and this configuration is, currently, pretty straightforward to read.

Probably I'm using this +operating system+ editor/interactive-interpreter as daily driver now. In the last section I explain my "experience" and reasons why I'm using Emacs.

*** Notes on this document

Every file is commented in a decent way, but I'm not very verbose. Sometimes I describe every single things written (in a decent way, I guess), other times, I'm awful.

Anyway, this document is not intended as a way to show my =elisp-fu= or something like that. When you read this, imagine a diary, a tale of my [mis]adventures 🤣.


** Before GUI: "early init"

Is good practice to define an =early-init.el= file: this kind of approach provides better loading for essential stuff.

Specifically, there are some tweaks taken from [[https://github.com/doomemacs/doomemacs][DOOM Emacs]], [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][David Wilson]], [[https://protesilaos.com/emacs/dotemacs][Protesilaos Stavrou]]...but I'll put some credits at the end of this document, along with useful resources.

#+include: "early-init.el" src emacs-lisp :tangle no


** Mandatory settings for the "init"

Note that =init.el= is mandatory, however I'm tangling it from this =.org= file (=Emacs.org=).

I have decided to tangle this document in =init.el= because I want to keep a few things in the main directory. 

#+begin_src emacs-lisp

  ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
  ;;; Commentary:

  ;; This file bootstraps the configuration, which is divided into
  ;; a number of other files.

  ;; NOTE: This file is generated from `Emacs.org`!

  ;;; Code:

  ;; Add load-path
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  ;; We don't want customizations in `init.el`, instead we use `custom.el`.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  ;; Set the right directory to store the native comp cache
  (when (and (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory)))

  ;; Disable damn sleep!
  ;; Yep, it's mandatory, that's the worst keybind ever.
  (global-unset-key (kbd "C-z"))

#+end_src


* Core settings

** Convenience 

Functions to determine if we are on NixOS, or not, then set our path, that's useful for auto-tangle function defined later.

#+begin_src emacs-lisp

  (defun archer/using-nix-p ()
    "Verifies if the running Emacs executable is under the `/nix/store/' path."
    (unless (or (equal system-type 'ms-dos)
                (equal system-type 'windows-nt))
      ;; Since there is no windows implementation of nix
      (string-prefix-p "/nix/store/"
                       (file-truename
                        (executable-find
                         (car command-line-args))))))

  (defvar archer/config-path
    (if (archer/using-nix-p)
        (if (file-exists-p (expand-file-name ".dotfiles/config/emacs/" (getenv "HOME")))
            (expand-file-name ".dotfiles/config/emacs/" (getenv "HOME")))
      (expand-file-name user-emacs-directory)))
  
#+end_src


** Packages bootstrap

We are requiring =init-packages=, where package manager (e.g. =package.el=, =straight.el=) and macro configuration tools (e.g. =use-package=, =leaf.el=, =setup.el=) are initialized.

Right now I'm using =straight.el= along with =leaf.el=. I love this combo.

- [[https://github.com/radian-software/straight.el][straight.el]] provides reproducibility (like Nix and Guix) with recipes, allows the editing of packages and manual version control operations on repos. [[https://github.com/radian-software/straight.el#advantages-of-straightel-5][Here]] the list of advantages.
- [[https://github.com/conao3/leaf.el][leaf.el]] is a more verbose =use-package=, but their syntax is similar, and it's easy to mantain (to add new keywords, for example).

Here I also install [[https://github.com/radian-software/blackout][blackout.el]], to manage modes displayed in the mode-line.
 
#+begin_src emacs-lisp

  ;; Require package management file.
  (require 'init-packages)

#+end_src

This is the =init-packages.el= file.

#+include: "lisp/init-packages.el" src emacs-lisp :tangle no


** Clean and fast

*** Keep order

This useful package helps to avoid filling up our work folders with ~auto-save~ files.

#+begin_src emacs-lisp

  ;; The `no-littering` package to keep folders where we edit files and the Emacs configuration folder clean.
  (leaf no-littering
    :doc "Keeps folders clean"
    :straight t
    :setq
    ;; The package `no-littering` doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (auto-save-file-name-transforms . `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

#+end_src


*** Garbage collector enhancement

[[https://github.com/emacsmirror/gcmh][GCMH]] allows the auto-regulation of garbage collector based on idle timers. During normal use a high GC threshold is set; when idling GC is triggered and a low threshold is set.

Right now I'm good with 16MB for high threshold.

#+begin_src emacs-lisp

  (leaf gcmh
    :straight t
    :init
    ;; The GC introduces annoying pauses and stuttering into our Emacs experience,
    ;; so we use `gcmh' to stave off the GC while we're using Emacs, and provoke it
    ;; when it's idle. However, if the idle delay is too long, we run the risk of
    ;; runaway memory usage in busy sessions. If it's too low, then we may as well
    ;; not be using gcmh at all.
    (setq gcmh-idle-delay 1 ; Default 15 seconds
          gcmh-auto-idle-delay-factor 10
          gcmh-high-cons-threshold (* 16 1024 1024)) ; 16MB
    :require t
    :config
    (gcmh-mode 1))

#+end_src


*** Minor tweaks

Aaand, here other code stolen from DOOM.
Performances are really better with this snippet (for me).

#+begin_src emacs-lisp

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we halve startup times, particularly when we use
  ;; fonts that are larger than the system default (which would resize the frame).
  (setq frame-inhibit-implied-resize t)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; PGTK builds only: this timeout adds latency to frame operations, like
  ;; `make-frame-invisible', which are frequently called without a guard because
  ;; it's inexpensive in non-PGTK builds. Lowering the timeout from the default
  ;; 0.1 should make childframes and packages that manipulate them (like `lsp-ui',
  ;; `company-box', and `posframe') feel much snappier. See emacs-lsp/lsp-ui#613.
  (setq pgtk-wait-for-event-timeout 0.001)

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)

  ;; Reduce *Message* noise at startup. An empty scratch buffer (or the dashboard)
  ;; is more than enough.
  (setq inhibit-startup-screen t
        inhibit-startup-echo-area-message user-login-name
        inhibit-default-init t
        ;; Shave seconds off startup time by starting the scratch buffer in
        ;; `fundamental-mode', rather than, say, `org-mode' or `text-mode', which
        ;; pull in a ton of packages. `doom/open-scratch-buffer' provides a better
        ;; scratch buffer anyway.
        initial-major-mode 'fundamental-mode
        initial-scratch-message nil)

  ;; Introduced in Emacs 28
  (setq use-short-answers t)

#+end_src


** Pick me up mom, I'm scared!


#+begin_src emacs-lisp

  (require 'init-help)

#+end_src

Sometimes we forget shortcuts as we type them, [[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command in a popup.

I'm not using helpful anymore.
+The [[https://github.com/Wilfred/helpful][helpful]] adds a lot of very helpful information to =describe-= command buffers. For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.+

This is the =init-help.el= file, nothing special.

#+include: "lisp/init-help.el" src emacs-lisp :tangle no


** Appearance

In this section are contained line-numbers settings, modeline related configuration, minor tweaks for icons (needed also for dashboard) and colors.

*** Font

#+begin_src emacs-lisp

  (require 'init-fonts)

#+end_src

Readability is important.
Currently using [[https://rubjo.github.io/victor-mono/][Victor Mono]] as font, I love it, also for variable-pitch face. 

Here the =init.fonts.el= file.

#+include: "lisp/init-fonts.el" src emacs-lisp :tangle no


*** Colors and general UI

#+begin_src emacs-lisp

  (require 'init-appearance)

#+end_src

I'm currently using [[https://protesilaos.com/emacs/modus-themes][Modus Themes]], with [[https://github.com/guidoschmidt/circadian.el][Circadian]] to set light/dark version, based on time. It's possible to switch themes on sunrise and sunset. Protesilaos made a great work, and these themes are, indeed, built into Emacs.

Here the =init.appearance.el= file.

#+include: "lisp/init-appearance.el" src emacs-lisp :tangle no


*** Dashboard Configuration

Useless cute dashboard, nothing to say, and there are minor tweaks to make it work with server-mode and Emacs PGTK/NativeComp.

#+begin_src emacs-lisp

  (require 'init-dash)

#+end_src

Here the =init-dash.el= file.

#+include: "lisp/init-dash.el" src emacs-lisp :tangle no


*** Modeline

#+begin_src emacs-lisp

 (require 'init-modeline)  

#+end_src

Just modeline customized.

#+include: "lisp/init-modeline.el" src emacs-lisp :tangle no


* Selection and search

This is one of my favourite parts. I think that fast selection, completing and search are a must, always, everywhere.

** Monster trio of completion

#+begin_src emacs-lisp

  (require 'init-complete)

#+end_src

As Completion UI [[https://github.com/minad/vertico][Vertico]] is my preferred choice, it's lightweight and fast, and relies on Emacs internals. [[https://github.com/minad/marginalia/][Marginalia]] for rich annotations provides a summary for candidates.
Completion can be better with an [[https://github.com/oantolin/orderless][Orderless]] (similar to FZF, if you know). Orderless is also customizable for matching style.

Following, the =init-complete.el= file.

#+include: "lisp/init-complete.el" src emacs-lisp :tangle no


** Consult

#+begin_src emacs-lisp

  (require 'init-consult)

#+end_src

[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function completing-read.

Consult offers, for example:
- Buffer switching command =consult-buffer= to switch between buffers and recently opened files.
- Multiple asynchronous search commands:
  - =consult-grep=
  - =consult-ripgrep=
  - =consult-line=, which resembles [[https://github.com/abo-abo/swiper][Swiper]].

Keybindings and configuration are in the =init-consult.el= file.

#+include: "lisp/init-consult.el" src emacs-lisp :tangle no


** Embark

#+begin_src emacs-lisp

  (require 'init-embark)

#+end_src

[[https://github.com/oantolin/embark/][Embark]] provides contextual menu offering actions for a target determined in the context, exactly like a contextual menu.

Keybindings and configuration are in the =init-embark.el= file.

#+include: "lisp/init-embark.el" src emacs-lisp :tangle no


** Completion at point

#+begin_src emacs-lisp

  (require 'init-complete-in-buffer)

#+end_src

I'm using Corfu right now, while Company is here due to ~telega.el~, especially for child frames instead of overlays.

Here =init-complete-in-buffer.el=.

#+include: "lisp/init-complete-in-buffer.el" src emacs-lisp :tangle no


* Interface interaction

This section contains my file and buffer related configurations. Nothing special.

** Editing enhancement

#+begin_src emacs-lisp

  (require 'init-editing)

#+end_src


Tweaks present here:
- Scroll (and smooth scroll for Emacs >= 29) and horizontal scroll with mouse;
- Truncate lines hook for =prog-mode=;
- Electric-pair mode and show-paren;
- Autorevert files after changes;
- [[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] mode for simpler undo-redo (and visual branches!).
- Rainbow-mode;
- Delete-selection mode to overwrite selected regions;
- Drag-stuff to...drag stuff around.

Following, my =init-editing.el=.

#+include: "lisp/init-editing.el" src emacs-lisp :tangle no


*** Meow

#+begin_src emacs-lisp

  ;; (require 'init-meow)

#+end_src

[[https://github.com/meow-edit/meow][Meow]] is yet another modal editing mode for Emacs. Meow aims to blend modal editing into Emacs with minimal interference with its original key-bindings, avoiding most of the hassle introduced by key-binding conflicts.

Keybindings are listed in =init-meow.el=.

#+include: "lisp/init-meow.el" src emacs-lisp :tangle no



** Windows navigation

#+begin_src emacs-lisp

  (require 'init-windows)

#+end_src

Moving around windows can be painful, but some built-in functions save our a*s.

#+include: "lisp/init-windows.el" src emacs-lisp :tangle no


** Buffer management

#+begin_src emacs-lisp

  (require 'init-buffers)

#+end_src

Sometimes buffers are too much, and I think that the classic buffer-menu is meh.
With =ibuffer= I can group buffers in ~Gnus~ style, customize actions remembering ~Dired~, and so on.

#+include: "lisp/init-buffers.el" src emacs-lisp :tangle no


** Dired

#+begin_src emacs-lisp

  (require 'init-dired)

#+end_src

Dired is a built-in file manager for Emacs that does some pretty amazing things. For example you can enable writable dired buffer to edit everything and just save to apply your changes.

I have disabled ~dired-find-alternate-file~ warning, I'm using it 'cause pressing ~Return~ key just opens too many buffers.

There's also a package named ~trashed~, to visit system trash.

This if my =init.dired.el= file.

#+include: "lisp/init-dired.el" src emacs-lisp :tangle no


* Org Mode

Org mode is the killer feature of Emacs. Markup language, agenda, brain, templates...you can do /literally/ (xD) everything.

** Essential configuration

#+begin_src emacs-lisp

  (require 'init-org)

#+end_src

I absolutely need focus when I'm editing my documents in the dark, so I want my buffer centered and lines untruncated.

Indentation is defined as a function for basic org-mode setup.

The purpose of +[[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]+ [[https://github.com/rnkn/olivetti][olivetti ]]is to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.

[[https://github.com/minad/org-modern][Org Modern]] replaces markup syntax with nice headings, TODOs etc.

#+include: "lisp/init-org.el" src emacs-lisp :tangle no


** Babel and Tempo

#+begin_src emacs-lisp

  (require 'init-org-languages)

#+end_src

To execute or export code in =org-mode= code blocks, we need to set up =org-babel-load-languages= for each language. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.
To add more =src= block templates, just copy one of the lines and change the two strings at the end, the first to be the template name and the second to contain the name of the language ([[https://orgmode.org/worg/org-contrib/babel/languages.html][listed here]]).

There's also a snippet that adds a hook to =org-mode= buffers so that ~archer/org-babel-tangle-config~ gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files. This function is inspired by David Wilson of System Crafters.

#+include: "lisp/init-org-languages.el" src emacs-lisp :tangle no


** Exporting

#+begin_src emacs-lisp

  (require 'init-org-export)

#+end_src

Org is surely nice, but what about export?
Wonderful, but it needs some tweaks, and not only for presentations.

The first section of this file is regards good LaTeX export through =ox-latex=.
The best way to set export options is [[https://jakebox.github.io/youtube/org_latex_video.html][the following]].

Structure every file like this:

#+begin_src org

  #+LaTeX_CLASS: article
  #+LaTeX_CLASS_OPTIONS: [letterpaper]
  #+OPTIONS: toc:nil
  #+SETUPFILE: ~/your/path/to/setup/file.org

#+end_src

Reveal.js presentations are exported through =ox-reveal=, which is very simple to configure.

The hidden gem is =ox-hugo=, you can manage your website content from Emacs, that's cool. You can also manage your contents with a single file, multiple files, or both ways!

#+include: "lisp/init-org-export.el" src emacs-lisp :tangle no


* Development

All my packages needed to develop in a decent way. Bye IDEs.

** Projects management and Git

#+begin_src emacs-lisp

  (require 'init-projects)

#+end_src

[[https://github.com/bbatsov/projectile][Projectile]] provides easy project management and navigation.

Common Git operations are easy to execute quickly using _Magit_'s command panel system.

*NOTE*: Make sure to configure a GitHub token before using this package!
- [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting started with Magit]]
- [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]

#+include: "lisp/init-projects.el" src emacs-lisp :tangle no


** Code style

#+begin_src emacs-lisp

  (require 'init-code-style)

#+end_src

[[https://github.com/glasserc/ethan-wspace][Ethan-wspace]] is a nice package to avoid useless/horrible extra whitespaces.

[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

The rest of =init-code-style.el= regards tab settings.

#+include: "lisp/init-code-style.el" src emacs-lisp :tangle no


** Syntax checking

Modern on-the-fly syntax checking.

#+begin_src emacs-lisp

  (require 'init-spell-and-check)

#+end_src

I'm a bit distracted, so spell and syntax checking is essential for me.

This is =init-spell-and-check.el=.

#+include: "lisp/init-spell-and-check.el" src emacs-lisp :tangle no


** Extra modes

#+begin_src emacs-lisp

  (require 'init-extra-modes)

#+end_src

=init.extra.modes.el=

#+include: "lisp/init-extra-modes.el" src emacs-lisp :tangle no


** Yasnippet

#+begin_src emacs-lisp

  (require 'init-snippets)

#+end_src

Do I have to explain this?

Here =init-snippets.el=.

#+include: "lisp/init-snippets.el" src emacs-lisp :tangle no


** LSP

#+begin_src emacs-lisp

  (require 'init-lsp)

#+end_src

[[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol]] support with multiples languages support for Emacs.

#+include: "lisp/init-lsp.el" src emacs-lisp :tangle no


* Frontend for other uses

Emacs can be a frontend for almost everything. 

** Mails

#+begin_src emacs-lisp

  (require 'init-mail)

#+end_src

=mu4e= (mu-for-emacs) is an e-mail client for GNU Emacs version 24.4 or higher, built on top of the =mu= e-mail search engine. mu4e is optimized for quickly processing large amounts of e-mail.

Some of its highlights:
- Fully search-based: there are no folders, only queries;
- Fully documented, with example configurations;
- User-interface optimized for speed, with quick key strokes for common actions;
- Support for non-English languages (so “angstrom” matches “Ångström”);
- Asynchronous: heavy actions don’t block emacs;
- Support for cryptography — signing, encrypting and decrypting;
- Address auto-completion based on the contacts in your messages;
- Extendable with your own snippets of elisp.

There's =mu4e-alert= a good package for notifications, a bit buggy, but is working :D.

Last but not least: [[https://github.com/jeremy-compostella/org-msg][org-msg]], an Outlook email style to compose (and reply to) emails, working also for ~Gnus~.

#+include: "lisp/init-mail.el" src emacs-lisp :tangle no


** Productivity

#+begin_src emacs-lisp

  (leaf pomodoro
    :straight t
    :require t
    :custom
    (pomodoro-desktop-notification . t)
    :config
    (pomodoro-add-to-mode-line))

#+end_src


** Reading

#+begin_src emacs-lisp

  (require 'init-pdf)

#+end_src

I don't like DocView because the rendering is given by images in tmp storage, zoom is "bad" (for me, of course), rendering can be slow, with especially PDFs big.
My choice is [[https://github.com/vedang/pdf-tools][pdf-tools]], that renders on demand pages, has good quality, and is very comfortable.

#+include: "lisp/init-pdf.el" src emacs-lisp :tangle no


** Daemons control

Nice mode to control your system (and user) services without leaving Emacs.

#+begin_src emacs-lisp

  (leaf daemons
    :straight t)

#+end_src


** Terminal

The best terminal emulator in Emacs.

#+begin_src emacs-lisp

  (leaf vterm
    :commands (vterm vterm-other-window)
    :init
    (unless (archer/using-nix-p) straight-use-package 'vterm)
    :bind
    ("<f5>" . vterm)
    :config
    (setq-default vterm-buffer-name " <<Terminal>>")
    (add-to-list 'display-buffer-alist
                 '("\xe795 <<Terminal>>" ;; Original regex: "\*vterm\*"
                   (display-buffer-in-side-window)
                   (window-height . 0.25)
                   (side . bottom)
                   (slot . 0))))

#+end_src


** Telegram

Beautiful client, maybe the best telegram client around. A PITA, sometimes, due to tdlib compatibility.

#+begin_src emacs-lisp

    (leaf telega
      :commands (telega)
      :init
      (unless (archer/using-nix-p) straight-use-package 'telega)
      (setq telega-directory (expand-file-name "~/.telega/"))
      (setq telega-server-libs-prefix (expand-file-name "~/.nix-profile"))
      (setq telega-use-images t)
      (setq telega-emoji-font-family "Noto Color Emoji")
      (setq telega-emoji-use-images nil)
      :config
      (require 'telega-mnz)
      (setq telega-animation-play-inline 2)
      (setq telega-inserter-for-chat-button 'telega-ins--chat-full-2lines)
      (setq telega-chat-button-width 30)
      (setq telega-root-fill-column (+ 20 telega-chat-button-width))
      (put (get 'telega-chat 'button-category-symbol)
           :inserter 'telega-ins--chat-full-2lines)
      (setq switch-to-buffer-preserve-window-point t)
      (setq telega-chat--display-buffer-action
            '((display-buffer-reuse-window display-buffer-use-some-window)))
      (define-key global-map (kbd "C-c t") telega-prefix-map)
      (setq telega-completing-read-function 'completing-read)
      :hook
      (telega-load-hook . telega-notifications-mode)
      (telega-chat-mode-hook . telega-mnz-mode))

#+end_src


** Music

Manage your music from Emacs? Possible!

#+begin_src emacs-lisp

  (leaf emms
    :straight t
    :init
    ;; Notification on play
    (defun emms-notify-track-description ()
      "Use `notify-send' to show the description of the currecnt track."
      (call-process
       "notify-send"
       nil nil nil
       "-a" "EMMS"
       "-t" "1000"
       "-h" "string:x-dunst-stack-tag:test"
       "-a" "music"
       (emms-track-description
        (emms-playlist-current-selected-track))))
    :config
    ;; Start
    (require 'emms-setup)
    (require 'emms-mode-line)
    (require 'emms-playing-time)
    (emms-all)

    ;; Info
    (setq emms-mode-line t)
    (setq emms-playing-time t)

    ;; Directory
    ;; (setq emms-source-file-default-directory "~/idkrn/")
    (setq emms-info-asynchronously t)

    ;; Other infos, covers
    (setq emms-info-functions '(emms-info-exiftool)
          emms-browser-covers 'emms-browser-cache-thumbnail-async)
    :hook
    (emms-player-started-hook . emms-notify-track-description))

#+end_src


* End

#+begin_src emacs-lisp

  ;;; init.el ends here

#+end_src

This is the end of my =init.el=, and of my configuration.


* Useful things

** My experience

I started using Emacs in late 2021, at the beginning of the third year of university.

Why? I needed something to write notes in a fast way, but I didn't last long: writing notes during my lessons slowed me down, probably because slides given by professors were enough.

Anyway, discovering Emacs was a surprise, and at first it was terrible, because I didn't know where to start!
Too many things to learn, but the community is awesome, resources are good, documentation is almost perfect, and it's VERY fun. So, I gave a chance to myself to learn Emacs.

*** How I learned?

=C-h=, essentially, self-documentation is useful ;).
Also EmacsWiki, videos and blog posts, manual, and so on.

*** Good people

My learning path has been discontinuous, but good enough to learn this beautiful piece of software from 1976 (1984, for GNU Emacs).

- [[https://systemcrafters.cc/][System Crafters]] :: helped me a lot with the series `Emacs from Scratch`, in fact my first configuration was almost a copy-paste of David's configuration...This slowed me down *a lot*.

- [[https://protesilaos.com/][Protesilaos Stavrou]] :: is a gold mine, he's a very clever and wonderful person. I appreciate his verbose explanations about any kind of magic trick he does with Emacs.

- [[https://www.youtube.com/user/mzamansky][Mike Zamansky]] :: has a series dedicated to Emacs, he works well, and helped me to figure out some obscure matters.

- [[https://www.youtube.com/channel/UCuj_loxODrOPxSsXDfJmpng][Andrew Tropin]] :: helped me on both Emacs and Nix (now he's using Guix), the problem of reproducibility is fascinating, and this guy is really prepared.

- [[https://github.com/purcell/emacs.d][Steve Purcell]] :: has a dev-centered configuration, but everyone can take inspiration from its dotfiles.

- [[https://github.com/seagle0128][Vincent Zhang]] :: author of [[https://github.com/seagle0128/.emacs.d][Centaur]], really good work.
