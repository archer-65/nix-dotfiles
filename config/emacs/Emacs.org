#+TITLE: Archer-65 Emacs Configuration
#+AUTHOR: Mario Liguori
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Overview and mandatory stuff

This is my personal configuration of ~GNU Emacs~. Many of these settings have been stolen from research and other configurations.
I have a very basic use-case, and this configuration is, currently, pretty straightforward to read.

Right now I'm deprecating =package.el= with =straight.el=, and =leaf.el= is my macro configuration tool.

** Before GUI: "early init"

Is good practice to define an =early-init.el= file: this kind of approach provides better loading for essential stuff.

#+include: "early-init.el" src emacs-lisp :tangle no


** Mandatory settings for the "init"

Note that =init.el= is mandatory, however I'm tangling it from this =.org= file (=Emacs.org=).

#+begin_src emacs-lisp

  ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
  ;;; Commentary:

  ;; This file bootstraps the configuration, which is divided into
  ;; a number of other files.

  ;;; Code:

  ;; Add load-path
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  ;; We don't want customizations in `init.el`, instead we use `custom.el`.
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  ;; Disable damn sleep!
  ;; Yep, it's mandatory, that's the worst keybind ever.
  (global-unset-key (kbd "C-z"))

#+end_src


* Core settings

** Packages bootstrap

We are requiring =init-packages=, where package manager (e.g. =package.el=, =straight.el=) and macro configuration tools (e.g. =use-package=, =leaf.el=, =setup.el=) are initialized.

#+begin_src emacs-lisp

  ;; Require package management file.
  (require 'init-packages)

#+end_src

This is the =init-packages.el= file.

#+include: "lisp/init-packages.el" src emacs-lisp :tangle no


** Keep order

This useful package helps to avoid filling up our work folders with ~auto-save~ files.

#+begin_src emacs-lisp

  ;; The `no-littering` package to keep folders where we edit files and the Emacs configuration folder clean.
  (leaf no-littering
    :doc "Keeps folders clean"
    :setq
    ;; The package `no-littering` doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (auto-save-file-name-transforms . `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
  
#+end_src


** Pick up me mom, I'm scared!

Sometimes we forget shortcuts as we type them, or we wish more _helpful_ description of functions/variables/keys of our environment.

#+begin_src emacs-lisp

  (require 'init-help)

#+end_src

[[https://github.com/justbur/emacs-which-key][Which-Key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command in a popup.

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful information to =describe-= command buffers. For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.

This is the =init-help.el= file, nothing special.

#+include: "lisp/init-help.el" src emacs-lisp :tangle no


** Appearance

#+begin_src emacs-lisp

  (require 'init-appearance)

#+end_src

I'm currently using these: [[https://protesilaos.com/emacs/modus-themes][Modus Themes]]. Protesilaos made a great work, and these themes are, indeed, built into Emacs.
Here are also contained line-numbers settings, modeline (doom atm) related configuration, minor tweaks for icons (needed also for dashboard) and colors.

Here the =init.appearance.el= file.

#+include: "lisp/init-appearance.el" src emacs-lisp :tangle no


** Font

Readability is important.
Currently using [[https://rubjo.github.io/victor-mono/][Victor Mono]] as font, I love it, also for variable-pitch face.

#+begin_src emacs-lisp

  (require 'init-fonts)

#+end_src

Here the =init.fonts.el= file.

#+include: "lisp/init-fonts.el" src emacs-lisp :tangle no


** Dashboard Configuration

Useless cute dashboard, nothing to say, and there are minor tweaks to make it work with server-mode and Emacs PGTK/NativeComp.

#+begin_src emacs-lisp

  (require 'init-dash)

#+end_src

Here the =init-dash.el= file.

#+include: "lisp/init-dash.el" src emacs-lisp :tangle no


* Selection and search

** Monster trio of completion

#+begin_src emacs-lisp

  (require 'init-complete)

#+end_src

As Completion UI [[https://github.com/minad/vertico][Vertico]] is my preferred choice, it's lightweight and fast, and relies on Emacs internals. [[https://github.com/minad/marginalia/][Marginalia]] for rich annotations provides a summary for candidates.
Completion can be better with an [[https://github.com/oantolin/orderless][Orderless]] (similar to FZF, if you know). Orderless is also customizable for matching style.

Following, the =init-complete.el= file.

#+include: "lisp/init-complete.el" src emacs-lisp :tangle no


** Consult

#+begin_src emacs-lisp

  (require 'init-consult)

#+end_src

[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function completing-read.

Consult offers, for example:
- Buffer switching command =consult-buffer= to switch between buffers and recently opened files.
- Multiple asynchronous search commands:
  - =consult-grep=
  - =consult-ripgrep=
  - =consult-line=, which resembles [[https://github.com/abo-abo/swiper][Swiper]].

Keybindings and configuration are in the =init-consult.el= file.

#+include: "lisp/init-consult.el" src emacs-lisp :tangle no


** Embark

#+begin_src emacs-lisp

  (require 'init-embark)

#+end_src

[[https://github.com/oantolin/embark/][Embark]] provides contextual menu offering actions for a target determined in the context, exactly like a contextual menu.

Keybindings and configuration are in the =init-embark.el= file.

#+include: "lisp/init-embark.el" src emacs-lisp :tangle no


** Completion at point

#+begin_src emacs-lisp

  (require 'init-complete-in-buffer)

#+end_src

I'm currently using Company, but I've planned to switch on Corfu, especially for child frames instead of overlays.

Here =init-complete-in-buffer.el=.

#+include: "lisp/init-complete-in-buffer.el" src emacs-lisp :tangle no


* Interface interaction

** Editing enhancement

#+begin_src emacs-lisp

  (require 'init-editing)

#+end_src


Tweaks present here:
- Scroll (and smooth scroll for Emacs >= 29) and horizontal scroll with mouse;
- Truncate lines hook for =prog-mode=;
- Electric-pair mode and show-paren;
- Autorevert files after changes;
- [[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] mode for simpler undo-redo (and visual branches!).
- Rainbow-mode;
- Delete-selection mode to overwrite selected regions;
- Drag-stuff to...drag stuff around.

Following, my =init-editing.el=.

#+include: "lisp/init-editing.el" src emacs-lisp :tangle no


*** Meow

#+begin_src emacs-lisp

  ;; (require 'init-meow)

#+end_src

[[https://github.com/meow-edit/meow][Meow]] is yet another modal editing mode for Emacs. Meow aims to blend modal editing into Emacs with minimal interference with its original key-bindings, avoiding most of the hassle introduced by key-binding conflicts.

Keybindings are listed in =init-meow.el=.

#+include: "lisp/init-meow.el" src emacs-lisp :tangle no


** Windows navigation

#+begin_src emacs-lisp

  (require 'init-windows)

#+end_src

Moving around windows can be painful, but some built-in functions save our a*s.

#+include: "lisp/init-windows.el" src emacs-lisp :tangle no


** Buffer management

#+begin_src emacs-lisp

  (require 'init-buffers)

#+end_src

Sometimes buffers are too much, and I think that the classic buffer-menu is meh.
With =ibuffer= I can group buffers in ~Gnus~ style, customize actions remembering ~Dired~, and so on.

#+include: "lisp/init-buffers.el" src emacs-lisp :tangle no


** Dired

#+begin_src emacs-lisp

  (require 'init-dired)

#+end_src

Dired is a built-in file manager for Emacs that does some pretty amazing things. For example you can enable writable dired buffer to edit everything and just save to apply your changes.

I have disabled ~dired-find-alternate-file~ warning, I'm using it 'cause pressing ~Return~ key just opens too many buffers.

There's also a package named ~trashed~, to visit system trash.

This if my =init.dired.el= file.

#+include: "lisp/init-dired.el" src emacs-lisp :tangle no


* Development

** Projects management and Git

#+begin_src emacs-lisp

  (require 'init-projects)

#+end_src

[[https://github.com/bbatsov/projectile][Projectile]] provides easy project management and navigation.

Common Git operations are easy to execute quickly using _Magit_'s command panel system.

*NOTE*: Make sure to configure a GitHub token before using this package!
- [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting started with Magit]]
- [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]] 

#+include: "lisp/init-projects.el" src emacs-lisp :tangle no


** Code style

#+begin_src emacs-lisp

  (require 'init-code-style)

#+end_src

[[https://github.com/glasserc/ethan-wspace][Ethan-wspace]] is a nice package to avoid useless/horrible extra whitespaces.

[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

The rest of =init-code-style.el= regards tab settings.

#+include: "lisp/init-code-style.el" src emacs-lisp :tangle no


** Syntax checking

Modern on-the-fly syntax checking.

#+begin_src emacs-lisp

  (require 'init-spell-and-check)

#+end_src

I'm a bit distracted, so spell and syntax checking is essential for me.

This is =init-spell-and-check.el=.

#+include: "lisp/init-spell-and-check.el" src emacs-lisp :tangle no


** Extra modes

#+begin_src emacs-lisp

  (require 'init-extra-modes)

#+end_src

=init.extra.modes.el=

#+include: "lisp/init-extra-modes.el" src emacs-lisp :tangle no


** Yasnippet

#+begin_src emacs-lisp

  (require 'init-snippets)

#+end_src

I have to explain this?

Here =init-snippets.el=.

#+include: "lisp/init-snippets.el" src emacs-lisp :tangle no


** LSP

#+begin_src emacs-lisp

  (require 'init-lsp)

#+end_src

[[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol]] support with multiples languages support for Emacs.

#+include: "lisp/init-lsp.el" src emacs-lisp :tangle no


* Org Mode

** Essential configuration

#+begin_src emacs-lisp

  (require 'init-org)

#+end_src

I absolutely need focus when I'm editing my documents in the dark, so I want my buffer centered and lines untruncated.

Indentation and =visual-line-column= are defined as a function for basic org-mode setup.

The purpose of [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] is to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.

[[https://github.com/minad/org-modern][Org Modern]] replaces markup syntax with nice headings, TODOs etc.

#+include: "lisp/init-org.el" src emacs-lisp :tangle no


** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  ;; (with-eval-after-load 'org
  ;;   (org-babel-do-load-languages
  ;;       'org-babel-load-languages
  ;;       '((emacs-lisp . t))))

  (require 'init-org-languages)

#+end_src


** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; (with-eval-after-load 'org
  ;;   ;; This is needed as of Org 9.2
  ;;   (require 'org-tempo)

  ;;   (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
  ;;   (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;;   (add-to-list 'org-structure-template-alist '("cc" . "src c")))

#+end_src


** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =archer-65/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp



#+end_src


** Export LaTeX

#+begin_src emacs-lisp
  
  ;; LaTeX export settings
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
  
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  
  ;; Newpage after TOC
  (setq org-latex-toc-command "\\tableofcontents \\clearpage")
  
  ;; Article 
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass[11pt,a4paper]{article}
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage{fixltx2e}
  \\usepackage{graphicx}
  \\usepackage{longtable}
  \\usepackage{float}
  \\usepackage{wrapfig}
  \\usepackage{rotating}
  \\usepackage[normalem]{ulem}
  \\usepackage{amsmath}
  \\usepackage{textcomp}
  \\usepackage{marvosym}
  \\usepackage{wasysym}
  \\usepackage{amssymb}
  \\usepackage{hyperref}
  \\usepackage{mathpazo}
  \\usepackage{color}
  \\usepackage{enumerate}
  \\definecolor{bg}{rgb}{0.95,0.95,0.95}
  \\tolerance=1000
        [NO-DEFAULT-PACKAGES]
        [PACKAGES]
        [EXTRA]
  \\linespread{1.1}
  \\hypersetup{pdfborder=0 0 0}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")))
  
  ;; Using minted for tables
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  
  (setq org-latex-minted-options '(("breaklines" "true")
                                   ("breakanywhere" "true")))
  
#+end_src


** HTML Reveal.js

#+begin_src emacs-lisp
  (leaf ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
#+end_src


* Mail

** MU4E

#+begin_src emacs-lisp

  (leaf emojify
    :hook (after-init . global-emojify-mode))

  (leaf mu4e
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :require t
    :config

    ;; Use mu4e for sending e-mail
    (setq mail-user-agent 'mu4e-user-agent)

    (setq sendmail-program "/usr/bin/msmtp"
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      send-mail-function 'smtpmail-send-it
      message-send-mail-function 'message-send-mail-with-sendmail)
      ;mu4e-compose-signature "Sent from Emacs")

    (with-eval-after-load "emojify"
      (delete 'mu4e-headers-mode emojify-inhibit-major-modes))

    (require 'mu4e-contrib)

    (setq shr-color-visible-luminance-min 60)
    (setq shr-color-visible-distance-min 5)
    (setq shr-use-colors nil)
    (advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))

    ;; Load org-mode integration
    (require 'org-mu4e)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-update-interval (* 5 60))
    (setq mu4e-maildir "~/mails")
    (setq mu4e-main-buffer-hide-personal-addresses t)

    (setq mu4e-contexts
          (list
           ;; Gmail Account
           (make-mu4e-context
            :name "Gmail"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
            :vars '((mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
                    (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
                    (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")
                    (mu4e-maildir-shortcuts .
                                            (("/Gmail/Inbox"     . ?i)
                                             ("/Gmail/[Gmail]/Sent Mail" . ?s)
                                             ("/Gmail/[Gmail]/Trash"     . ?t)
                                             ("/Gmail/[Gmail]/Drafts"    . ?d)))))
           ;; Outlook
           (make-mu4e-context
            :name "Outlook"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Outlook" (mu4e-message-field msg :maildir))))
            :vars '((mu4e-drafts-folder  . "/Outlook/Drafts")
                    (mu4e-sent-folder  . "/Outlook/Sent")
                    (mu4e-refile-folder  . "/Outlook/Archive")
                    (mu4e-trash-folder  . "/Outlook/Deleted")
                    (mu4e-maildir-shortcuts .
                                            (("/Outlook/Inbox"   . ?i)
                                             ("/Outlook/Sent"    . ?s)
                                             ("/Outlook/Deleted" . ?t)
                                             ("/Outlook/Drafts"  . ?d)))))

           ;;UniNa
           (make-mu4e-context
            :name "Unina"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Unina" (mu4e-message-field msg :maildir))))
            :vars '((mu4e-drafts-folder  . "/Unina/Bozze")
                    (mu4e-sent-folder  . "/Unina/Posta inviata")
                    (mu4e-trash-folder  . "/Unina/Deleted Items")
                    (mu4e-maildir-shortcuts .
                                            (("/Unina/Inbox"         . ?i)
                                             ("/Unina/Posta inviata" . ?s)
                                             ("/Unina/Deleted Items" . ?t)
                                             ("/Unina/Bozze"         . ?d)))))))
    ;; Set Bookmarks for all
    (setq  mu4e-bookmarks '(( :name  "Unread messages"
                              :query "flag:unread AND NOT flag:trashed"
                              :key ?u)
                            ( :name "Today's messages"
                              :query "date:today..now"
                              :key ?t)))

    (setq mu4e-context-policy 'pick-first)

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    ;; Don't ask to quit... why is this the default?
    (setq mu4e-confirm-quit nil)
    (mu4e t))

#+end_src

** MUE4-ALERT

#+begin_src emacs-lisp

  (leaf mu4e-alert
    :after mu4e
    :init
    (mu4e-alert-set-default-style 'libnotify)

    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)

    (defun mu4e-alert--get-mu4e-frame ()
      "Try getting a frame containing a mu4e buffer."
      (car (delq nil (mapcar (lambda (buffer)
                               (when (and buffer
                                          (get-buffer-window buffer t))
                                 (window-frame (get-buffer-window buffer t))))
                             (list mu4e-main-buffer-name)))))

    (defun mu4e-alert-filter-repeated-mails (mails)
      "Filters the MAILS that have been seen already."
      (cl-remove-if (lambda (mail)
                      (prog1 (and (not mu4e-alert-notify-repeated-mails)
                                  (ht-get mu4e-alert-repeated-mails
                                          (plist-get mail :message-id)))
                        (ht-set! mu4e-alert-repeated-mails
                                 (plist-get mail :message-id)
                                 t)))
                    mails))

    (setq mu4e-alert-notify-repeated-mails nil))

#+end_src

** Org Mail

#+begin_src emacs-lisp

  (leaf org-msg
    :after mu4e
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-default-alternatives '((new		. (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text)))
          org-msg-convert-citation t)
    (org-msg-mode))

#+end_src
