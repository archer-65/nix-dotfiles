#+TITLE: Archer-65 Emacs Configuration
#+AUTHOR: Mario Liguori
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Font and Transparency

These are Basic UI configuration for font size and frame transparency (if you like it).

#+begin_src emacs-lisp

  ;; NOTE: init.el is generated by Emacs.org

  ;; Adjust fonts for your system
  ;;(defvar archer-65/default-font-size 180)
  ;; (defvar archer-65/default-variable-font-size 180)

  ;; Make frame transparency overridable
  (defvar archer-65/frame-transparency '(100 . 100))

#+end_src

* Startup Performance

Startup performance message.

#+begin_src emacs-lisp

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun archer-65/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'archer-65/display-startup-time)

#+end_src

* Package System Setup

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  ;; (require 'quelpa-use-package)
  (setq use-package-always-ensure t)

  ;; straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+end_src

** Automatic Package Updates

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "16:00"))

#+end_src

* Keep Folders Clean

The [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean.

#+begin_src emacs-lisp

  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI Configuration

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar

  (setq-default cursor-type 'bar)

  (column-number-mode)                 
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha archer-65/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,archer-65/frame-transparency))

  ;; Use package here to avoid strange things in daemon mode
  (use-package all-the-icons)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

* UI Configuration

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.

#+begin_src emacs-lisp

  (use-package rainbow-mode)

  ;;; For packaged versions which must use `require':
  (use-package modus-themes
    :ensure
    :init
    ;; ;; Add all your customizations prior to loading the themes
    ;; (setq modus-themes-italic-constructs t
    ;;       modus-themes-bold-constructs nil
    ;;       modus-themes-region '(bg-only accented))
    (setq modus-themes-region '(accented no-extend bg-only)
          modus-themes-org-blocks 'gray-background)
    ;; Load the theme files before enabling a theme
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-vivendi) 
    :bind ("<f5>" . modus-themes-toggle))

  ;; (use-package doom-themes
  ;;   :init
  ;;   ;; Avoid strange things in daemon mode
  ;;   (if (daemonp)
  ;;   (add-hook 'after-make-frame-functions
  ;;         (lambda (frame) (load-theme ' t)))
  ;;   (load-theme 'doom-one t)))

  ;; ;; (use-package base16-theme
  ;;    :init
  ;;    ;; Avoid strange things in daemon mode
  ;;    (if (daemonp)
  ;;      (add-hook 'after-make-frame-functions
  ;;        (lambda (frame) (load-theme 'base16-rose-pine t)))
  ;;        (load-theme 'base16-rose-pine-moon t)))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :hook
    (after-init . doom-modeline-mode)
    :custom
    ;; (doom-modeline-height 35)
    (doom-modeline-bar-width 1)
    (doom-modeline-buffer-file-name-style 'buffer-name))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Vertico + Orderless

For completions let's try [[https://github.com/minad/vertico][Vertico]] and [[https://github.com/oantolin/orderless][Orderless]].

#+begin_src emacs-lisp

  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode))

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch))
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

#+end_src

** Consult

[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function completing-read. Completion allows you to quickly select an item from a list of candidates. Consult offers in particular an advanced buffer switching command consult-buffer to switch between buffers and recently opened files. Furthermore Consult provides multiple search commands, an asynchronous consult-grep and consult-ripgrep, and consult-line, which resembles Swiper.

#+begin_src emacs-lisp

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flycheck)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-org-heading)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s F" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    ;;(setq consult-project-root-function
    ;;      (lambda ()
    ;;        (when-let (project (project-current))
    ;;          (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
     (autoload 'projectile-project-root "projectile")
     (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

#+end_src

** Marginalia

[[https://github.com/minad/marginalia/][Marginalia]] for rich annotations

#+begin_src emacs-lisp

  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

#+end_src

** Embark

[[https://github.com/oantolin/embark/][Embark]] provides contextual menu offering actions for a target determined in the context.

#+begin_src emacs-lisp

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package wgrep)

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Helpful Help Commands


[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Dashboard Configuration

#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)))
    (setq dashboard-set-haeding-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/img/stallman.png")
    (setq dashboard-banner-logo-title "Welcome to Emacs!")
    ;; (setq dashboard-startup-banner 'logo)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
          `(
            ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
              "Homepage"
              "Browse homepage"
              (lambda (&rest _) (browse-url "https://github.com/archer-65/emacs-config")))

             (,(all-the-icons-faicon "archive" :height 1.1 :v-adjust 0.0)
              "Update Packages"
              "Click to updates your packages"
              (lambda (&rest _) (auto-package-update-now)))

             (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0)
              "Configuration"
              "Click to config Emacs"
              (lambda (&rest _) (find-file "~/.emacs.d/Emacs.org")))))))

#+end_src

* Editing
** Meow
[[https://github.com/meow-edit/meow][Meow]] is yet another modal editing mode for Emacs. Meow aims to blend modal editing into Emacs with minimal interference with its original key-bindings, avoiding most of the hassle introduced by key-binding conflicts.

#+begin_src emacs-lisp

  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (use-package meow
    :ensure t
    ;; :init
    :config
    (meow-setup)
    (meow-global-mode 1))

#+end_src

** Undo Tree

Enable [[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] mode with a branching of changes under tree, less linear than standard Emacs' one.

#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

#+end_src

** Company

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :config
    (add-to-list 'company-backends 'company-nixos-options)
    (global-company-mode t)
    :hook
    (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common)))

#+end_src

** Flycheck

 Modern on-the-fly syntax checking.
 
#+begin_src emacs-lisp

    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode))

#+end_src

** Buffer Utils

#+begin_src emacs-lisp

  (delete-selection-mode 1)

  ;; Windmove with shift
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))

  ;; Make windmove work in Org mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

  (global-set-key (kbd "C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-<down>") 'shrink-window)
  (global-set-key (kbd "C-<up>") 'enlarge-window)

  ;; Disable damn sleep!
  (global-unset-key (kbd "C-z"))

#+end_src

** Tabs

#+begin_src emacs-lisp

  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)

#+end_src

** Beacon

Never lose your cursor

#+begin_src emacs-lisp

  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))

#+end_src

** Multiple Cursors

#+begin_src emacs-lisp

  ;; Have to fix it
  (use-package multiple-cursors
    :ensure t
    :bind
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this))

#+end_src

** Drag Stuff

#+begin_src emacs-lisp

  (use-package drag-stuff
    :ensure t
    :config
    (drag-stuff-mode t)
    (drag-stuff-global-mode 1)
    (drag-stuff-define-keys))

#+end_src

* Org Mode + Font Configuration

** Better Font Faces

The =archer-65/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode= (and not only, rofl).  

#+begin_src emacs-lisp

  (defun archer-65/org-font-setup ()
    (message "Setting faces")
    ;; Global fonts
    (set-face-attribute 'default nil :font "VictorMono Nerd Font-18") ;;:height archer-65/default-font-size)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "VictorMono Nerd Font-18") ;;:height archer-65/default-font-size)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "VictorMono Nerd Font-18") ;; :height archer-65/default-variable-font-size :weight 'regular) 

    ;; ORG
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (with-eval-after-load 'org
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "VictorMono Nerd Font" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)))

  ;; run this hook after we have initialized the first time
  (add-hook 'after-init-hook 'archer-65/org-font-setup)
  ;; re-run this hook if we create a new frame from daemonized Emacs
  (add-hook 'server-after-make-frame-hook 'archer-65/org-font-setup)

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp

  (defun archer-65/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :hook (org-mode . archer-65/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-pretty-entities 't)

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.

#+begin_src emacs-lisp

  ;; (use-package org-bullets
  ;;   :hook (org-mode . org-bullets-mode)
  ;;   :custom
  ;;   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (use-package org-modern
    :hook (org-mode . org-modern-mode))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun archer-65/org-mode-visual-fill ()
    (setq visual-fill-column-width 170
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . archer-65/org-mode-visual-fill))

#+end_src

*** Date

#+begin_src emacs-lisp
  
  ;; Date settings for org-mode
  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats
        '("<%d %b %Y>" . "<%d/%m/%y %a %H:%M>"))
  
#+end_src

** Export LaTeX

#+begin_src emacs-lisp
  
  ;; LaTeX export settings
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
  
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  
  ;; Newpage after TOC
  (setq org-latex-toc-command "\\tableofcontents \\clearpage")
  
  ;; Article 
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass[11pt,a4paper]{article}
  \\usepackage[utf8]{inputenc}
  \\usepackage[T1]{fontenc}
  \\usepackage{fixltx2e}
  \\usepackage{graphicx}
  \\usepackage{longtable}
  \\usepackage{float}
  \\usepackage{wrapfig}
  \\usepackage{rotating}
  \\usepackage[normalem]{ulem}
  \\usepackage{amsmath}
  \\usepackage{textcomp}
  \\usepackage{marvosym}
  \\usepackage{wasysym}
  \\usepackage{amssymb}
  \\usepackage{hyperref}
  \\usepackage{mathpazo}
  \\usepackage{color}
  \\usepackage{enumerate}
  \\definecolor{bg}{rgb}{0.95,0.95,0.95}
  \\tolerance=1000
        [NO-DEFAULT-PACKAGES]
        [PACKAGES]
        [EXTRA]
  \\linespread{1.1}
  \\hypersetup{pdfborder=0 0 0}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")))
  
  ;; Using minted for tables
  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  
  (setq org-latex-minted-options '(("breaklines" "true")
                                   ("breakanywhere" "true")))
  
#+end_src

** HTML Reveal.js

#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t))))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("cc" . "src c")))

#+end_src

** LaTeX Live

This snippet is used to highlight LaTeX code in org files

#+begin_src emacs-lisp

  (eval-after-load 'org
    '(setf org-highlight-latex-and-related '(latex)))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =archer-65/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun archer-65/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'archer-65/org-babel-tangle-config)))

#+end_src

* Development
** Yasnippet

#+begin_src emacs-lisp

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets)

#+end_src
** Smart Parens

#+begin_src emacs-lisp

  (use-package smartparens
    :hook (prog-mode . smartparens-mode))

#+end_src

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map))
    ;;:init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    ;;(when (file-directory-p "~/Git")
    ;;  (setq projectile-project-search-path '("~/Git")))
    ;;(setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")

  (use-package company-nixos-options)

  ;; (use-package nixos-option)
#+end_src
** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode)

#+end_src

** LSP


[[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol]] support with multiples languages support for Emacs.


#+begin_src emacs-lisp

  (use-package lsp-haskell)

  (use-package lsp-mode
    :init
    :config
    (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                      :major-modes '(nix-mode)
                      :server-id 'nix))
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (java-mode . lsp)
           (c-mode . lsp)
           (c++-mode . lsp)
           (haskell-mode-hook . lsp)
           (nix-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally if you want to use debugger
  ;; (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src

*** LSP-UI

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** C/C++

#+begin_src emacs-lisp

  ;; Already set in LSP, to rewatch a little bit

#+end_src

*** JAVA

#+begin_src emacs-lisp

  (use-package lsp-java
    :config (add-hook 'java-mode-hook 'lsp))

#+end_src

** Magit

Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

- =n= - next line
- =p= - previous line
- =j= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= - Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- ='*' t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (put 'dired-find-alternate-file 'disabled nil)

  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map (kbd "<return>")
                'dired-find-alternate-file) ; was dired-advertised-find-file
              (define-key dired-mode-map (kbd "^")
                (lambda () (interactive) (find-alternate-file "..")))
                                          ; was dired-up-directory
              ))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (define-key dired-mode-map (kbd "C-c d") 'dired-hide-dotfiles-mode))

#+end_src

* Mail

** MU4E

#+begin_src emacs-lisp

  (use-package emojify
    :hook (after-init . global-emojify-mode))

  (use-package mu4e
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    ;:defer 10 ; Wait until 10 seconds after startup
    :config

    ;; Use mu4e for sending e-mail
    (setq mail-user-agent 'mu4e-user-agent)

    (setq sendmail-program "/usr/bin/msmtp"
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      send-mail-function 'smtpmail-send-it
      message-send-mail-function 'message-send-mail-with-sendmail)
      ;mu4e-compose-signature "Sent from Emacs")

    (with-eval-after-load "emojify"
      (delete 'mu4e-headers-mode emojify-inhibit-major-modes))

    (require 'mu4e-contrib)

    (setq shr-color-visible-luminance-min 60)
    (setq shr-color-visible-distance-min 5)
    (setq shr-use-colors nil)
    (advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))

    ;; Load org-mode integration
    (require 'org-mu4e)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-update-interval (* 5 60))
    (setq mu4e-maildir "~/Mail")
    (setq mu4e-main-buffer-hide-personal-addresses t)

    (setq mu4e-contexts
          (list
           ;; Gmail Account
           (make-mu4e-context
            :name "Gmail"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
            :vars '((mu4e-sent-folder  . "/Gmail/Sent Mail")
                    (mu4e-drafts-folder  . "/Gmail/Drafts")
                    (mu4e-trash-folder  . "/Gmail/Trash")
                    (mu4e-maildir-shortcuts .
                                            (("/Gmail/Inbox"     . ?i)
                                             ("/Gmail/Sent Mail" . ?s)
                                             ("/Gmail/Trash"     . ?t)
                                             ("/Gmail/Drafts"    . ?d)))))
           ;; Outlook
           (make-mu4e-context
            :name "Outlook"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Outlook" (mu4e-message-field msg :maildir))))
            :vars '((mu4e-drafts-folder  . "/Outlook/Drafts")
                    (mu4e-sent-folder  . "/Outlook/Sent")
                    (mu4e-refile-folder  . "/Outlook/Archive")
                    (mu4e-trash-folder  . "/Outlook/Deleted")
                    (mu4e-maildir-shortcuts .
                                            (("/Outlook/Inbox"   . ?i)
                                             ("/Outlook/Sent"    . ?s)
                                             ("/Outlook/Deleted" . ?t)
                                             ("/Outlook/Drafts"  . ?d)))))

           ;;Unina
           (make-mu4e-context
            :name "Unina"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/Unina" (mu4e-message-field msg :maildir))))
            :vars '((mu4e-drafts-folder  . "/Unina/Bozze")
                    (mu4e-sent-folder  . "/Unina/Posta inviata")
                    (mu4e-trash-folder  . "/Unina/Deleted Items")
                    (mu4e-maildir-shortcuts .
                                            (("/Unina/Inbox"         . ?i)
                                             ("/Unina/Posta inviata" . ?s)
                                             ("/Unina/Deleted Items" . ?t)
                                             ("/Unina/Bozze"         . ?d)))))))
    ;; Set Bookmarks for all
    (setq  mu4e-bookmarks '(( :name  "Unread messages"
                              :query "flag:unread AND NOT flag:trashed"
                              :key ?u)
                            ( :name "Today's messages"
                              :query "date:today..now"
                              :key ?t)))

    (setq mu4e-context-policy 'pick-first)

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    ;; Don't ask to quit... why is this the default?
    (setq mu4e-confirm-quit nil)
    ;; ;; (setq archer-65/mu4e-inbox-query
    ;;       "(maildir:/Gmail/Inbox OR maildir:/Outlook/Inbox OR maildir:/Unina/Inbox) AND flag:unread")
    (mu4e t))

#+end_src

** MUE4-ALERT

#+begin_src emacs-lisp

  (use-package mu4e-alert
    ;; :quelpa (mu4e-alert :fetcher git :url "https://github.com/xzz53/mu4e-alert")
    :after mu4e
    :init
    (mu4e-alert-set-default-style 'libnotify)

    (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
    ;; (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)

    (defun mu4e-alert--get-mu4e-frame ()
      "Try getting a frame containing a mu4e buffer."
      (car (delq nil (mapcar (lambda (buffer)
                               (when (and buffer
                                          (get-buffer-window buffer t))
                                 (window-frame (get-buffer-window buffer t))))
                             (list mu4e-main-buffer-name)))))

    (defun mu4e-alert-filter-repeated-mails (mails)
      "Filters the MAILS that have been seen already."
      (cl-remove-if (lambda (mail)
                      (prog1 (and (not mu4e-alert-notify-repeated-mails)
                                  (ht-get mu4e-alert-repeated-mails
                                          (plist-get mail :message-id)))
                        (ht-set! mu4e-alert-repeated-mails
                                 (plist-get mail :message-id)
                                 t)))
                    mails))

    (setq mu4e-alert-notify-repeated-mails nil))
    ;:config
    ;(setq mu4e-alert-interesting-mail-query archer-65/mu4e-inbox-query)

#+end_src

** Org Mail

#+begin_src emacs-lisp

  ;; (use-package org-mime
  ;;   :ensure t
  ;;   :config
  ;;   (setq org-mime-export-options '(:section-numbers nil
  ;;                                                    :with-author nil
  ;;                                                    :with-toc nil))
  ;;   (add-hook 'org-mime-html-hook
  ;;             (lambda ()
  ;;               (org-mime-change-element-style
  ;;                "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
  ;;                              "#E6E1DC" "#232323"))))
  ;;   (add-hook 'message-send-hook 'org-mime-htmlize))

  (use-package org-msg
    :after mu4e
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-default-alternatives '((new		. (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text)))
          org-msg-convert-citation t)
    (org-msg-mode))

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
