#+TITLE: Emacs Configuration
#+AUTHOR: Mario Liguori
#+DATE: 2022-06-13

#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

#+HUGO_BASE_DIR: ~/projects/personal-website/
#+HUGO_SECTION: workflow
#+HUGO_CATEGORIES: workflow
#+HUGO_TAGS: emacs configuration elisp dotfiles
#+HUGO_AUTO_SET_LASTMOD: t

* Preface

** Overview

This is my personal configuration of =GNU Emacs=. Many of these settings have been stolen from research and other configurations.
I have a very basic use-case, and this configuration is, currently, pretty straightforward to read.

Probably I'm using this +operating system+ editor/interactive-interpreter as daily driver now. In the last section I explain my "experience" and reasons why I'm using Emacs.

*** Notes on this document

Every file is commented in a decent way, but I'm not very verbose. Sometimes I describe every single things written (in a decent way, I guess), other times, I'm awful.

Anyway, this document is not intended as a way to show my =elisp-fu= or something like that. When you read this, imagine a diary, a tale of my [mis]adventures ðŸ¤£.

** Before GUI: "early init"

Is good practice to define an =early-init.el= file: this kind of approach provides better loading for essential stuff.

Specifically, there are some tweaks taken from [[https://github.com/doomemacs/doomemacs][DOOM Emacs]], [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][David Wilson]], [[https://protesilaos.com/emacs/dotemacs][Protesilaos Stavrou]]...but I'll put some credits at the end of this document, along with useful resources.

#+include: "early-init.el" src emacs-lisp :tangle no

** Mandatory settings for the "init"

Note that =init.el= is mandatory, however I'm tangling it from this =.org= file (=Emacs.org=).

I have decided to tangle this document in =init.el= because I want to keep a few things in the main directory, while populating submodules to manage all of this.

#+begin_src emacs-lisp

  ;;; init.el --- Load the full configuration -*- lexical-binding: t -*-
  ;;; Commentary:

  ;; This file bootstraps the configuration, which is divided into
  ;; a number of other files.

  ;; NOTE: This file is generated from `Emacs.org`!

  ;;; Code:

  ;; Add load-path for submodules
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  ;; We don't want user customizations in `init.el`, instead we use `custom.el`
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))

  ;; Set a better directory to store the native comp cache
  (when (and (fboundp 'native-comp-available-p)
             (native-comp-available-p))
    (add-to-list 'native-comp-eln-load-path (expand-file-name "var/eln-cache/" user-emacs-directory)))

  ;; Disable damn sleep!
  ;; Yep, it's mandatory, that's the worst keybind ever, and should be remapped
  (global-unset-key (kbd "C-z"))

#+end_src


* Core settings

** Convenience

Functions to determine if we are using a Nix installation of Emacs, or not, then we set our configuration path.

#+begin_src emacs-lisp

  (defun archer-using-nix-p ()
    "Verifies if the running Emacs executable is under the `/nix/store/' path."
    (unless (or (equal system-type 'ms-dos)
                (equal system-type 'windows-nt))
      ;; Since there is no windows implementation of nix
      (string-prefix-p "/nix/store/"
                       (file-truename
                        (executable-find
                         (car command-line-args))))))

  (defvar archer-config-path
    (if (archer-using-nix-p)
        (if (file-exists-p (expand-file-name ".dotfiles/home/modules/editors/emacs/config/" (getenv "HOME")))
            (expand-file-name ".dotfiles/home/modules/editors/emacs/config/" (getenv "HOME")))
      (expand-file-name user-emacs-directory)))

#+end_src


** Packages bootstrap

We are requiring =init-packages=, where package manager (e.g. =package.el=, =straight.el=) and macro configuration tools (e.g. =use-package=, =leaf.el=, =setup.el=) are initialized.

Right now I'm using =straight.el= along with =setup.el=.

- [[https://github.com/radian-software/straight.el][straight.el]] provides reproducibility (like Nix and Guix) with recipes, allows the editing of packages and manual version control operations on repos. [[https://github.com/radian-software/straight.el#advantages-of-straightel-5][Here]] the list of advantages.
- [[https://git.sr.ht/~pkal/setup][setup.el]] is less declarative compared to other solutions: you have more control, I would say that it's similar to vanilla Emacs configuration, but less verbose and with easy definition of new macros.
  
I also install [[https://github.com/radian-software/blackout][blackout.el]], to manage modes displayed in the mode-line.

#+begin_src emacs-lisp

  ;; Require package management file
  (require 'init-packages)

#+end_src

#+include: "lisp/init-packages.el" src emacs-lisp :tangle no

** Performances enhancement

[[https://github.com/emacsmirror/gcmh][GCMH]] allows the auto-regulation of garbage collector based on idle timers. During normal use a high GC threshold is set; when idling GC is triggered and a low threshold is set.

Right now I'm good with 16MB for high threshold.

Other tweaks in this section have been stolen from DOOM and other configurations around.

#+begin_src emacs-lisp

  (require 'init-performance)

#+end_src

#+include: "lisp/init-performance.el" src emacs-lisp :tangle no

** Pick me up mom, I'm scared!

Sometimes we forget shortcuts as we type them, [[https://github.com/justbur/emacs-which-key][which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command in a popup.

I'm not using helpful anymore.
+The [[https://github.com/Wilfred/helpful][helpful]] adds a lot of very helpful information to =describe-= command buffers. For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.+

#+begin_src emacs-lisp

  (require 'init-help)

#+end_src

#+include: "lisp/init-help.el" src emacs-lisp :tangle no

** Appearance

In this section are contained line-numbers settings, modeline related configuration, minor tweaks for icons (needed also for dashboard) and colors.

*** Font

Readability is important.
Currently using [[https://rubjo.github.io/victor-mono/][Victor Mono]] as font, I love it, also for variable-pitch face.

#+begin_src emacs-lisp

  (require 'init-fonts)

#+end_src

#+include: "lisp/init-fonts.el" src emacs-lisp :tangle no

*** Colors and general UI

I'm currently using [[https://protesilaos.com/emacs/modus-themes][Modus Themes]], with [[https://github.com/guidoschmidt/circadian.el][Circadian]] to set light/dark version, based on time. It's possible to switch themes on sunrise and sunset. Protesilaos made a great work, and these themes are, indeed, built into Emacs (but I always get the packaged version :D)

Here the =init.appearance.el= file.

#+begin_src emacs-lisp

  (require 'init-appearance)

#+end_src

#+include: "lisp/init-appearance.el" src emacs-lisp :tangle no

*** Dashboard Configuration

Useless and cute dashboard, nothing to say, and there are minor tweaks to make it work with server-mode and Emacs PGTK/NativeComp.

#+begin_src emacs-lisp

  (require 'init-dash)

#+end_src

Here the =init-dash.el= file.

#+include: "lisp/init-dash.el" src emacs-lisp :tangle no

*** Modeline

Just modeline customized.

#+begin_src emacs-lisp

 (require 'init-modeline)

#+end_src

#+include: "lisp/init-modeline.el" src emacs-lisp :tangle no

* Interface interaction

This section contains my file and buffer related configurations. Nothing special.

** Editing enhancement

Tweaks present here:
- Scroll (and smooth scroll for Emacs >= 29) and horizontal scroll with mouse;
- Truncate lines hook for =prog-mode=;
- Electric-pair mode and show-paren;
- Autorevert files after changes;
- [[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] mode for simpler undo-redo (and visual branches!).
- Rainbow-mode;
- Delete-selection mode to overwrite selected regions;
- Drag-stuff to...drag stuff around;
- etc.

#+begin_src emacs-lisp

  (require 'init-editing)

#+end_src

#+include: "lisp/init-editing.el" src emacs-lisp :tangle no

**** Meow

[[https://github.com/meow-edit/meow][Meow]] is yet another modal editing mode for Emacs. Meow aims to blend modal editing into Emacs with minimal interference with its original key-bindings, avoiding most of the hassle introduced by key-binding conflicts.

Keybindings are listed in =init-meow.el=.

#+begin_src emacs-lisp

  (require 'init-meow)

#+end_src

#+include: "lisp/init-meow.el" src emacs-lisp :tangle no

** Windows navigation

Moving around windows can be painful, but some built-in functions save our a*s.

#+begin_src emacs-lisp

  (require 'init-windows)

#+end_src

#+include: "lisp/init-windows.el" src emacs-lisp :tangle no

** Buffer management

Sometimes buffers are too much, and I think that the classic buffer-menu is meh.
With =ibuffer= I can group buffers in ~Gnus~ style, customize actions remembering ~Dired~, and so on.

#+begin_src emacs-lisp

  (require 'init-buffers)

#+end_src

#+include: "lisp/init-buffers.el" src emacs-lisp :tangle no

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things. For example you can enable writable dired buffer to edit everything and just save to apply your changes.

I have disabled ~dired-find-alternate-file~ warning, I'm using it 'cause pressing ~Return~ key just opens too many buffers.

There's also a package named ~trashed~, to visit system trash.

#+begin_src emacs-lisp

  (require 'init-dired)

#+end_src

#+include: "lisp/init-dired.el" src emacs-lisp :tangle no

* Selection and search

This is one of my favourite parts. I think that fast selection, completing and search are a must, always, everywhere.

** Monster trio of completion

As Completion UI [[https://github.com/minad/vertico][Vertico]] is my preferred choice, it's lightweight and fast, and relies on Emacs internals. [[https://github.com/minad/marginalia/][Marginalia]] for rich annotations provides a summary for candidates.
Completion can be better with an [[https://github.com/oantolin/orderless][Orderless]] (similar to FZF, if you know). Orderless is also customizable for matching style.

#+begin_src emacs-lisp

  (require 'init-complete)

#+end_src

#+include: "lisp/init-complete.el" src emacs-lisp :tangle no

** Embark

[[https://github.com/oantolin/embark/][Embark]] provides contextual menu offering actions for a target determined in the context, exactly like a contextual menu.

#+begin_src emacs-lisp

  (require 'init-embark)

#+end_src

#+include: "lisp/init-embark.el" src emacs-lisp :tangle no

** Consult

[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion function completing-read.

Consult offers, for example:
- Buffer switching command =consult-buffer= to switch between buffers and recently opened files.
- Multiple asynchronous search commands:
  - =consult-grep=
  - =consult-ripgrep=
  - =consult-line=, which resembles [[https://github.com/abo-abo/swiper][Swiper]]
    
#+begin_src emacs-lisp

  (require 'init-consult)

#+end_src

#+include: "lisp/init-consult.el" src emacs-lisp :tangle no

** Completion at point

I'm using [[https://github.com/minad/corfu][Corfu]] with [[https://github.com/minad/cape][Cape]] right now, while [[https://github.com/company-mode/company-mode][Company]] stuff is here due to other modes completion backends which relies on it. I prefer Corfu especially because it uses Emacs completion facilities, and child frames instead of overlays.

Completions are provided by commands which provide completion, or by Capfs (=completion-at-point-functions=). Many major modes implement a Capf, also LSP clients which talk to the LSP server to retrieve completion.

Cape provides extensions and backends. A great thing of Cape is the =cape-company-to-capf= adapter for Company backends, and it is very easy to use!

#+begin_src emacs-lisp

  (require 'init-complete-in-buffer)

#+end_src

#+include: "lisp/init-complete-in-buffer.el" src emacs-lisp :tangle no

* Org Mode

Org mode is the killer feature of Emacs. Markup language, agenda, brain, templates...you can do /literally/ (xD) everything.

** Essential configuration

I absolutely need focus when I'm editing my documents in the dark, so I want my buffer centered and lines untruncated.

Indentation is defined as a function for basic org-mode setup.

The purpose of +[[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]+ [[https://github.com/rnkn/olivetti][olivetti ]]is to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.

[[https://github.com/minad/org-modern][Org Modern]] replaces markup syntax with nice headings, TODOs etc.

#+begin_src emacs-lisp

  (require 'init-org)

#+end_src

#+include: "lisp/init-org.el" src emacs-lisp :tangle no

** Babel and Tempo

To execute or export code in =org-mode= code blocks, we need to set up =org-babel-load-languages= for each language. [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.
To add more =src= block templates, just copy one of the lines and change the two strings at the end, the first to be the template name and the second to contain the name of the language ([[https://orgmode.org/worg/org-contrib/babel/languages.html][listed here]]).

There's also a snippet that adds a hook to =org-mode= buffers so that ~archer-org-babel-tangle-config~ gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files. This function is inspired by David Wilson of System Crafters.

#+begin_src emacs-lisp

  (require 'init-org-languages)

#+end_src

#+include: "lisp/init-org-languages.el" src emacs-lisp :tangle no

** Exporting

#+begin_src emacs-lisp

  (require 'init-org-export)

#+end_src

Org is surely nice, but what about export?
Wonderful, but it needs some tweaks, and not only for presentations.

The first section of this file is regards good LaTeX export through =ox-latex=.
The best way to set export options is [[https://jakebox.github.io/youtube/org_latex_video.html][the following]].

Structure every file like this:

#+begin_src org

  #+LaTeX_CLASS: article
  #+LaTeX_CLASS_OPTIONS: [letterpaper]
  #+OPTIONS: toc:nil
  #+SETUPFILE: ~/your/path/to/setup/file.org

#+end_src

Reveal.js presentations are exported through =ox-reveal=, which is very simple to configure.

The hidden gem is =ox-hugo=, you can manage your website content from Emacs, that's cool. You can also manage your contents with a single file, multiple files, or both ways!

#+include: "lisp/init-org-export.el" src emacs-lisp :tangle no

* Development

All my packages needed to develop in a decent way. Bye IDEs.

** Projects management and Git

#+begin_src emacs-lisp

  (require 'init-projects)

#+end_src

[[https://github.com/bbatsov/projectile][Projectile]] provides easy project management and navigation.

Common Git operations are easy to execute quickly using _Magit_'s command panel system.

*NOTE*: Make sure to configure a GitHub token before using this package!
- [[https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started][Getting started with Magit]]
- [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Token Creation]]

#+include: "lisp/init-projects.el" src emacs-lisp :tangle no

** Code style

[[https://github.com/lassik/emacs-format-all-the-code][Format-all-the-code]] lets you auto-format source code in many languages. It is very nice, you need only the formatters installed on your system.

[[https://github.com/glasserc/ethan-wspace][Ethan-wspace]] is a nice package to avoid useless/horrible extra whitespaces.

[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

The rest of =init-code-style.el= regards tab settings.

#+begin_src emacs-lisp

  (require 'init-code-style)

#+end_src

#+include: "lisp/init-code-style.el" src emacs-lisp :tangle no

** Syntax checking

Lately I've been trying =Flymake=, built-in into Emacs. [[https://www.flycheck.org/][Flycheck]] has many checkers though, so here we go with [[https://github.com/purcell/flymake-flycheck]["how to use Flycheck chekers in Flymake"]]

#+begin_src emacs-lisp

  (require 'init-spell-and-check)

#+end_src

#+include: "lisp/init-spell-and-check.el" src emacs-lisp :tangle no

** Language Server Protocol

[[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] support with multiples languages support for Emacs.

There are two ways to use LSP with Emacs: [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] and [[https://github.com/joaotavora/eglot][Eglot]] (built into Emacs 29). I prefer the latter for the following reason, given by the author of =Eglot=:

#+begin_quote

Eglot is considerably less code and hassle than lsp-mode.el. In most cases, there's nothing to configure. It's a minimalist approach focused on user experience and performance.

#+end_quote

To avoid copy-pasting, here the [[https://github.com/joaotavora/eglot#historical-differences-to-lsp-modeel][full comparision]].

#+begin_src emacs-lisp

  (require 'init-lsp)

#+end_src

#+include: "lisp/init-lsp.el" src emacs-lisp :tangle no

** Snippets

#+begin_src emacs-lisp

  (require 'init-snippets)

#+end_src

#+include: "lisp/init-snippets.el" src emacs-lisp :tangle no

** Extra modes

#+begin_src emacs-lisp

  (require 'init-extra-modes)

#+end_src

#+include: "lisp/init-extra-modes.el" src emacs-lisp :tangle no

* Frontend for other uses

Emacs can be a frontend for almost everything.

** Mails

I've used =mu4e= (mu-for-emacs) for almost a year. It is an e-mail client for GNU Emacs version 24.4 or higher, built on top of the [[https://github.com/djcb/mu][mu]] e-mail search engine. =mu4e= is optimized for quickly processing large amounts of e-mail.

However, I've always struggled with it, and I recently tried [[https://notmuchmail.org/][notmuch]]. Oh boy, I wish I had done it sooner!
It is a very fast tag-based email indexer and system to use with multiple clients, Emacs, Neomutt, and so on.

#+begin_quote

"Not much mail" is what Notmuch thinks about your email collection. Even if you receive 12000 messages per month or have on the order of millions of messages that you've been saving for decades. Regardless, Notmuch will be able to quickly search all of it. It's just plain not much mail.

#+end_quote

#+begin_quote

"Not much mail" is also what you should have in your inbox at any time. Notmuch gives you what you need, (tags and fast search), so that you can keep your inbox tamed and focus on what really matters in your life, (which is surely not email).

#+end_quote

#+begin_src emacs-lisp

  (require 'init-mail)

#+end_src

#+include: "lisp/init-mail.el" src emacs-lisp :tangle no

** Reading

I don't like DocView because the rendering is given by images in tmp storage, zoom is "bad" (for me, of course), rendering can be slow, with especially PDFs big.
My choice is [[https://github.com/vedang/pdf-tools][pdf-tools]], that renders on demand pages, has good quality, and is very comfortable.

#+begin_src emacs-lisp

  (require 'init-pdf)

#+end_src

#+include: "lisp/init-pdf.el" src emacs-lisp :tangle no

** Terminal

The "best" terminal emulator in Emacs.

#+begin_src emacs-lisp

  (require 'init-shell)

#+end_src

#+include: "lisp/init-shell.el" src emacs-lisp :tangle no

** Telegram

Beautiful client, maybe the best telegram client around. A PITA, sometimes, due to tdlib compatibility.

#+begin_src emacs-lisp

  (require 'init-telega)

#+end_src

#+include: "lisp/init-telega.el" src emacs-lisp :tangle no

** Media

Manage your media from Emacs? Possible!

#+begin_src emacs-lisp

  (require 'init-media)

#+end_src

#+include: "lisp/init-media.el" src emacs-lisp :tangle no

** Daemons control

Nice mode to control your system (and user) services without leaving Emacs.

#+begin_src emacs-lisp

  (setup (:pkg daemons))

#+end_src

* End

#+begin_src emacs-lisp

  ;;; init.el ends here

#+end_src

This is the end of my =init.el=, and of my configuration.

* Useful things

** My experience

I started using Emacs in late 2021, at the beginning of the third year of university.

Why? I needed something to write notes in a fast way, but I didn't last long: writing notes during my lessons slowed me down, probably because slides given by professors were enough.

Anyway, discovering Emacs was a surprise, and at first it was terrible, because I didn't know where to start!
Too many things to learn, but the community is awesome, resources are good, documentation is almost perfect, and it's VERY fun. So, I gave a chance to myself to learn Emacs.

*** How I learned?

=C-h=, essentially, self-documentation is useful ;).
Also EmacsWiki, videos and blog posts, manual, and so on.

*** Good resources

My learning path has been discontinuous, but good enough to learn this beautiful piece of software from 1976 (1984, for GNU Emacs).

- [[https://systemcrafters.cc/][System Crafters]] :: helped me a lot with the series `Emacs from Scratch`, his channel introduced Emacs to me for the first time. My first configuration was almost a copy-paste of David's configuration...This slowed me down *a lot*.

- [[https://protesilaos.com/][Protesilaos Stavrou]] :: is a gold mine, he's a very clever, wonderful person. I appreciate his verbose explanations about any kind of magic trick he does with Emacs.

- [[https://www.youtube.com/user/mzamansky][Mike Zamansky]] :: has a series dedicated to Emacs, and helped me to figure out some obscure matters.

- [[https://www.youtube.com/channel/UCuj_loxODrOPxSsXDfJmpng][Andrew Tropin]] :: helped me on both Emacs and Nix (now he's using Guix), the problem of reproducibility is fascinating, and this guy is really prepared.

- [[https://github.com/purcell/emacs.d][Steve Purcell]] :: has a dev-centered configuration, but everyone can take inspiration from its dotfiles.

- [[https://github.com/seagle0128][Vincent Zhang]] :: author of [[https://github.com/seagle0128/.emacs.d][Centaur]], really good work.

- [[https://github.com/doomemacs/doomemacs][Doom Emacs]] :: an opinionated distribution of Emacs, providing many modules and optimizations.  

# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
